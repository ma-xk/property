generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  people        Person[]
  places        Place[]
  properties    Property[]
  sessions      Session[]
  taxPayments   TaxPayment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id                     String     @id @default(cuid())
  name                   String
  state                  String?
  country                String     @default("United States")
  description            String?
  userId                 String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  assessmentDay          Int?
  assessmentMonth        Int?
  lateInterestRate       Decimal?
  taxDueDay              Int?
  taxDueMonth            Int?
  taxNotes               String?
  taxOfficePhone         String?
  taxPaymentAddress      String?
  taxPaymentWebsite      String?
  ceoEmail               String?
  ceoName                String?
  ceoPhone               String?
  plumbingInspectorEmail String?
  plumbingInspectorName  String?
  plumbingInspectorPhone String?
  zoningOfficeAddress    String?
  zoningOfficePhone      String?
  zoningOfficeWebsiteUrl String?
  millRate               Decimal?
  user                   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties             Property[]

  @@unique([name, state, userId])
  @@index([userId])
}

model Person {
  id                       String     @id @default(cuid())
  name                     String
  email                    String?
  phone                    String?
  company                  String?
  role                     String?
  notes                    String?
  userId                   String
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  user                     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertiesAsBuyerAgent   Property[] @relation("PropertyBuyerAgent")
  propertiesAsSellerAgent  Property[] @relation("PropertySellerAgent")
  propertiesAsSeller       Property[] @relation("PropertySeller")
  propertiesAsTitleCompany Property[] @relation("PropertyTitleCompany")

  @@unique([name, userId])
  @@index([userId])
}

model Property {
  id                   String    @id @default(cuid())
  address              String
  name                 String?
  description          String?
  type                 String?
  bedrooms             Int?
  bathrooms            Decimal?
  squareFeet           Int?
  rent                 Decimal?
  deposit              Decimal?
  available            Boolean   @default(true)
  userId               String
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  acres                Decimal?
  balloonDueDate       DateTime?
  buyerAgent           String?
  closingDate          DateTime?
  eRecordingFee        Decimal?
  earnestMoney         Decimal?

  financingTerms       String?
  financingType        String?
  ownersPolicyPremium  Decimal?
  propertyTaxProration Decimal?
  purchasePrice        Decimal?
  realEstateCommission Decimal?
  recordingFeesDeed    Decimal?
  seller               String?
  sellerAgent          String?
  stateTaxStamps       Decimal?
  titleCompany         String?
  titleExamination     Decimal?
  titleSettlementFee   Decimal?
  zoning               String?
  buyerAgentId         String?
  placeId              String?
  sellerAgentId        String?
  sellerId             String?
  titleCompanyId       String?
  city                 String?
  state                String?
  streetAddress        String?
  zipCode              String?
  assessedValue        Decimal?
  assessmentNotes      String?
  lastAssessmentDate   DateTime?
  marketValue          Decimal?
  buyerAgentPerson     Person?   @relation("PropertyBuyerAgent", fields: [buyerAgentId], references: [id])
  place                Place?    @relation(fields: [placeId], references: [id])
  sellerAgentPerson    Person?   @relation("PropertySellerAgent", fields: [sellerAgentId], references: [id])
  sellerPerson         Person?   @relation("PropertySeller", fields: [sellerId], references: [id])
  titleCompanyPerson   Person?   @relation("PropertyTitleCompany", fields: [titleCompanyId], references: [id])
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  taxPayments          TaxPayment[]

  @@index([userId])
  @@index([placeId])
  @@index([sellerId])
  @@index([sellerAgentId])
  @@index([buyerAgentId])
  @@index([titleCompanyId])
}

model TaxPayment {
  id          String   @id @default(cuid())
  year        Int      // Tax year (e.g., 2024)
  amount      Decimal  // Payment amount
  paymentDate DateTime // Date when payment was made
  notes       String?  // Optional notes about the payment
  
  // Relationships
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  userId      String   // For security - ensure user can only access their payments
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([propertyId, year]) // One payment per property per year
  @@index([propertyId])
  @@index([userId])
}
