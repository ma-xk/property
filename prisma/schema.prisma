// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String   @id @default(cuid())
  address     String   // Required field
  
  // Basic Property Info
  name        String?  // Optional: Property name/title
  description String?  // Optional: Property description
  acres       Decimal? // Property size in acres
  zoning      String?  // Zoning classification
  
  // Purchase Information
  purchasePrice      Decimal? // Purchase price
  earnestMoney       Decimal? // Earnest money deposit
  closingDate        DateTime? // Actual closing date
  estimatedTaxes     Decimal? // Annual estimated taxes
  
  // Financing Details
  financingType      String?  // Cash, Seller Financing, etc.
  financingTerms     String?  // Detailed financing terms
  balloonDueDate     DateTime? // Balloon payment due date
  
  // Closing Costs
  titleSettlementFee    Decimal? // Title settlement fee
  titleExamination      Decimal? // Title examination cost
  ownersPolicyPremium   Decimal? // Owner's policy premium
  recordingFeesDeed     Decimal? // Recording fees for deed
  stateTaxStamps        Decimal? // State tax/stamps
  eRecordingFee         Decimal? // E-recording fee
  propertyTaxProration  Decimal? // Property tax proration
  realEstateCommission  Decimal? // Real estate commission
  
  // People/Companies Involved
  seller          String?  // Seller name
  sellerAgent     String?  // Seller's agent
  buyerAgent      String?  // Buyer's agent
  titleCompany    String?  // Title company
  
  // Legacy fields (keeping for backward compatibility)
  type        String?  // Property type
  bedrooms    Int?     // Number of bedrooms
  bathrooms   Decimal? // Number of bathrooms
  squareFeet  Int?     // Square footage
  rent        Decimal? // Monthly rent amount
  deposit     Decimal? // Security deposit
  available   Boolean  @default(true) // Whether property is available
  
  // System fields
  userId      String   // Foreign key to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Index for efficient user property queries
}