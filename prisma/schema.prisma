// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  properties    Property[]
  people        Person[]
  places        Place[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Place {
  id          String   @id @default(cuid())
  name        String   // City, town, or area name
  state       String?  // State or province
  country     String   @default("United States")
  description String?  // Description of the place
  
  // System fields
  userId      String   // Foreign key to User (who manages this place data)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  properties  Property[]
  
  @@unique([name, state, userId]) // Unique place per user
  @@index([userId])
}

model Person {
  id          String   @id @default(cuid())
  name        String   // Full name
  email       String?  // Email address
  phone       String?  // Phone number
  company     String?  // Company/organization
  role        String?  // Role (e.g., "Real Estate Agent", "Seller", "Title Company")
  notes       String?  // Additional notes
  
  // System fields
  userId      String   // Foreign key to User (who manages this person data)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships - properties where this person is involved
  propertiesAsSeller      Property[] @relation("PropertySeller")
  propertiesAsSellerAgent Property[] @relation("PropertySellerAgent")
  propertiesAsBuyerAgent  Property[] @relation("PropertyBuyerAgent")
  propertiesAsTitleCompany Property[] @relation("PropertyTitleCompany")
  
  @@unique([name, userId]) // Unique person per user
  @@index([userId])
}

model Property {
  id          String   @id @default(cuid())
  address     String   // Legacy full address field (keeping for backward compatibility)
  
  // Separate address components
  streetAddress String? // Street number and name (e.g., "123 Main Street")
  city         String?  // City/Town name (e.g., "Stamford", "Madawaska")
  state        String?  // State abbreviation (e.g., "CT", "ME")
  zipCode      String?  // ZIP code (e.g., "06901")
  
  // Basic Property Info
  name        String?  // Optional: Property name/title
  description String?  // Optional: Property description
  acres       Decimal? // Property size in acres
  zoning      String?  // Zoning classification
  
  // Purchase Information
  purchasePrice      Decimal? // Purchase price
  earnestMoney       Decimal? // Earnest money deposit
  closingDate        DateTime? // Actual closing date
  estimatedTaxes     Decimal? // Annual estimated taxes
  
  // Financing Details
  financingType      String?  // Cash, Seller Financing, etc.
  financingTerms     String?  // Detailed financing terms
  balloonDueDate     DateTime? // Balloon payment due date
  
  // Closing Costs
  titleSettlementFee    Decimal? // Title settlement fee
  titleExamination      Decimal? // Title examination cost
  ownersPolicyPremium   Decimal? // Owner's policy premium
  recordingFeesDeed     Decimal? // Recording fees for deed
  stateTaxStamps        Decimal? // State tax/stamps
  eRecordingFee         Decimal? // E-recording fee
  propertyTaxProration  Decimal? // Property tax proration
  realEstateCommission  Decimal? // Real estate commission
  
  // Legacy string fields (keeping for backward compatibility)
  seller          String?  // Seller name
  sellerAgent     String?  // Seller's agent
  buyerAgent      String?  // Buyer's agent
  titleCompany    String?  // Title company
  
  // New relationship fields (optional - can be used instead of strings)
  sellerId        String?
  sellerAgentId   String?
  buyerAgentId    String?
  titleCompanyId  String?
  placeId         String?
  
  // Relationships
  sellerPerson     Person? @relation("PropertySeller", fields: [sellerId], references: [id])
  sellerAgentPerson Person? @relation("PropertySellerAgent", fields: [sellerAgentId], references: [id])
  buyerAgentPerson  Person? @relation("PropertyBuyerAgent", fields: [buyerAgentId], references: [id])
  titleCompanyPerson Person? @relation("PropertyTitleCompany", fields: [titleCompanyId], references: [id])
  place            Place?  @relation(fields: [placeId], references: [id])
  
  // Legacy fields (keeping for backward compatibility)
  type        String?  // Property type
  bedrooms    Int?     // Number of bedrooms
  bathrooms   Decimal? // Number of bathrooms
  squareFeet  Int?     // Square footage
  rent        Decimal? // Monthly rent amount
  deposit     Decimal? // Security deposit
  available   Boolean  @default(true) // Whether property is available
  
  // System fields
  userId      String   // Foreign key to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Index for efficient user property queries
  @@index([placeId]) // Index for place-based queries
  @@index([sellerId]) // Index for seller-based queries
  @@index([sellerAgentId]) // Index for agent-based queries
  @@index([buyerAgentId]) // Index for agent-based queries
  @@index([titleCompanyId]) // Index for title company-based queries
}